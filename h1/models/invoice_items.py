# coding: utf-8

"""
    HyperOne

    HyperOne API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from h1.configuration import Configuration


class InvoiceItems(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'price': 'str',
        'netto': 'str',
        'brutto': 'str',
        'vat_amount': 'str',
        'vat_rate': 'str',
        'quantity': 'float'
    }

    attribute_map = {
        'name': 'name',
        'price': 'price',
        'netto': 'netto',
        'brutto': 'brutto',
        'vat_amount': 'vatAmount',
        'vat_rate': 'vatRate',
        'quantity': 'quantity'
    }

    def __init__(self, name=None, price=None, netto=None, brutto=None, vat_amount=None, vat_rate=None, quantity=None, local_vars_configuration=None):  # noqa: E501
        """InvoiceItems - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._price = None
        self._netto = None
        self._brutto = None
        self._vat_amount = None
        self._vat_rate = None
        self._quantity = None
        self.discriminator = None

        self.name = name
        self.price = price
        self.netto = netto
        self.brutto = brutto
        self.vat_amount = vat_amount
        self.vat_rate = vat_rate
        self.quantity = quantity

    @property
    def name(self):
        """Gets the name of this InvoiceItems.  # noqa: E501


        :return: The name of this InvoiceItems.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InvoiceItems.


        :param name: The name of this InvoiceItems.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def price(self):
        """Gets the price of this InvoiceItems.  # noqa: E501


        :return: The price of this InvoiceItems.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this InvoiceItems.


        :param price: The price of this InvoiceItems.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and price is None:  # noqa: E501
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def netto(self):
        """Gets the netto of this InvoiceItems.  # noqa: E501


        :return: The netto of this InvoiceItems.  # noqa: E501
        :rtype: str
        """
        return self._netto

    @netto.setter
    def netto(self, netto):
        """Sets the netto of this InvoiceItems.


        :param netto: The netto of this InvoiceItems.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and netto is None:  # noqa: E501
            raise ValueError("Invalid value for `netto`, must not be `None`")  # noqa: E501

        self._netto = netto

    @property
    def brutto(self):
        """Gets the brutto of this InvoiceItems.  # noqa: E501


        :return: The brutto of this InvoiceItems.  # noqa: E501
        :rtype: str
        """
        return self._brutto

    @brutto.setter
    def brutto(self, brutto):
        """Sets the brutto of this InvoiceItems.


        :param brutto: The brutto of this InvoiceItems.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and brutto is None:  # noqa: E501
            raise ValueError("Invalid value for `brutto`, must not be `None`")  # noqa: E501

        self._brutto = brutto

    @property
    def vat_amount(self):
        """Gets the vat_amount of this InvoiceItems.  # noqa: E501


        :return: The vat_amount of this InvoiceItems.  # noqa: E501
        :rtype: str
        """
        return self._vat_amount

    @vat_amount.setter
    def vat_amount(self, vat_amount):
        """Sets the vat_amount of this InvoiceItems.


        :param vat_amount: The vat_amount of this InvoiceItems.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and vat_amount is None:  # noqa: E501
            raise ValueError("Invalid value for `vat_amount`, must not be `None`")  # noqa: E501

        self._vat_amount = vat_amount

    @property
    def vat_rate(self):
        """Gets the vat_rate of this InvoiceItems.  # noqa: E501


        :return: The vat_rate of this InvoiceItems.  # noqa: E501
        :rtype: str
        """
        return self._vat_rate

    @vat_rate.setter
    def vat_rate(self, vat_rate):
        """Sets the vat_rate of this InvoiceItems.


        :param vat_rate: The vat_rate of this InvoiceItems.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and vat_rate is None:  # noqa: E501
            raise ValueError("Invalid value for `vat_rate`, must not be `None`")  # noqa: E501

        self._vat_rate = vat_rate

    @property
    def quantity(self):
        """Gets the quantity of this InvoiceItems.  # noqa: E501


        :return: The quantity of this InvoiceItems.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InvoiceItems.


        :param quantity: The quantity of this InvoiceItems.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and quantity is None:  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceItems):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvoiceItems):
            return True

        return self.to_dict() != other.to_dict()
