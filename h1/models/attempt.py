# coding: utf-8

"""
    HyperOne

    HyperOne API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from h1.configuration import Configuration


class Attempt(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'status': 'float',
        'error': 'bool',
        'stdout': 'dict(str, str)',
        'stderr': 'dict(str, str)',
        'created_on': 'datetime',
        'agent': 'str'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'error': 'error',
        'stdout': 'stdout',
        'stderr': 'stderr',
        'created_on': 'createdOn',
        'agent': 'agent'
    }

    def __init__(self, id=None, status=None, error=False, stdout=None, stderr=None, created_on=None, agent=None, local_vars_configuration=None):  # noqa: E501
        """Attempt - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._status = None
        self._error = None
        self._stdout = None
        self._stderr = None
        self._created_on = None
        self._agent = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if error is not None:
            self.error = error
        if stdout is not None:
            self.stdout = stdout
        if stderr is not None:
            self.stderr = stderr
        if created_on is not None:
            self.created_on = created_on
        if agent is not None:
            self.agent = agent

    @property
    def id(self):
        """Gets the id of this Attempt.  # noqa: E501


        :return: The id of this Attempt.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attempt.


        :param id: The id of this Attempt.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this Attempt.  # noqa: E501


        :return: The status of this Attempt.  # noqa: E501
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Attempt.


        :param status: The status of this Attempt.  # noqa: E501
        :type: float
        """

        self._status = status

    @property
    def error(self):
        """Gets the error of this Attempt.  # noqa: E501


        :return: The error of this Attempt.  # noqa: E501
        :rtype: bool
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Attempt.


        :param error: The error of this Attempt.  # noqa: E501
        :type: bool
        """

        self._error = error

    @property
    def stdout(self):
        """Gets the stdout of this Attempt.  # noqa: E501


        :return: The stdout of this Attempt.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._stdout

    @stdout.setter
    def stdout(self, stdout):
        """Sets the stdout of this Attempt.


        :param stdout: The stdout of this Attempt.  # noqa: E501
        :type: dict(str, str)
        """

        self._stdout = stdout

    @property
    def stderr(self):
        """Gets the stderr of this Attempt.  # noqa: E501


        :return: The stderr of this Attempt.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._stderr

    @stderr.setter
    def stderr(self, stderr):
        """Sets the stderr of this Attempt.


        :param stderr: The stderr of this Attempt.  # noqa: E501
        :type: dict(str, str)
        """

        self._stderr = stderr

    @property
    def created_on(self):
        """Gets the created_on of this Attempt.  # noqa: E501


        :return: The created_on of this Attempt.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Attempt.


        :param created_on: The created_on of this Attempt.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def agent(self):
        """Gets the agent of this Attempt.  # noqa: E501


        :return: The agent of this Attempt.  # noqa: E501
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this Attempt.


        :param agent: The agent of this Attempt.  # noqa: E501
        :type: str
        """

        self._agent = agent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Attempt):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Attempt):
            return True

        return self.to_dict() != other.to_dict()
