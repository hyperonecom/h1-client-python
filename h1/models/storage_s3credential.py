# coding: utf-8

"""
    HyperOne

    HyperOne API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from h1.configuration import Configuration


class StorageS3credential(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_key_id': 'str',
        'session_token': 'str',
        'secret_access_key': 'str',
        'endpoint': 'str',
        'region': 'str',
        'location': 'str',
        'bucket': 'str',
        'key': 'str'
    }

    attribute_map = {
        'access_key_id': 'accessKeyId',
        'session_token': 'sessionToken',
        'secret_access_key': 'secretAccessKey',
        'endpoint': 'endpoint',
        'region': 'region',
        'location': 'location',
        'bucket': 'bucket',
        'key': 'key'
    }

    def __init__(self, access_key_id=None, session_token=None, secret_access_key=None, endpoint=None, region=None, location=None, bucket=None, key=None, local_vars_configuration=None):  # noqa: E501
        """StorageS3credential - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_key_id = None
        self._session_token = None
        self._secret_access_key = None
        self._endpoint = None
        self._region = None
        self._location = None
        self._bucket = None
        self._key = None
        self.discriminator = None

        if access_key_id is not None:
            self.access_key_id = access_key_id
        if session_token is not None:
            self.session_token = session_token
        if secret_access_key is not None:
            self.secret_access_key = secret_access_key
        if endpoint is not None:
            self.endpoint = endpoint
        if region is not None:
            self.region = region
        if location is not None:
            self.location = location
        if bucket is not None:
            self.bucket = bucket
        if key is not None:
            self.key = key

    @property
    def access_key_id(self):
        """Gets the access_key_id of this StorageS3credential.  # noqa: E501


        :return: The access_key_id of this StorageS3credential.  # noqa: E501
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id):
        """Sets the access_key_id of this StorageS3credential.


        :param access_key_id: The access_key_id of this StorageS3credential.  # noqa: E501
        :type: str
        """

        self._access_key_id = access_key_id

    @property
    def session_token(self):
        """Gets the session_token of this StorageS3credential.  # noqa: E501


        :return: The session_token of this StorageS3credential.  # noqa: E501
        :rtype: str
        """
        return self._session_token

    @session_token.setter
    def session_token(self, session_token):
        """Sets the session_token of this StorageS3credential.


        :param session_token: The session_token of this StorageS3credential.  # noqa: E501
        :type: str
        """

        self._session_token = session_token

    @property
    def secret_access_key(self):
        """Gets the secret_access_key of this StorageS3credential.  # noqa: E501


        :return: The secret_access_key of this StorageS3credential.  # noqa: E501
        :rtype: str
        """
        return self._secret_access_key

    @secret_access_key.setter
    def secret_access_key(self, secret_access_key):
        """Sets the secret_access_key of this StorageS3credential.


        :param secret_access_key: The secret_access_key of this StorageS3credential.  # noqa: E501
        :type: str
        """

        self._secret_access_key = secret_access_key

    @property
    def endpoint(self):
        """Gets the endpoint of this StorageS3credential.  # noqa: E501


        :return: The endpoint of this StorageS3credential.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this StorageS3credential.


        :param endpoint: The endpoint of this StorageS3credential.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def region(self):
        """Gets the region of this StorageS3credential.  # noqa: E501


        :return: The region of this StorageS3credential.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this StorageS3credential.


        :param region: The region of this StorageS3credential.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def location(self):
        """Gets the location of this StorageS3credential.  # noqa: E501


        :return: The location of this StorageS3credential.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StorageS3credential.


        :param location: The location of this StorageS3credential.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def bucket(self):
        """Gets the bucket of this StorageS3credential.  # noqa: E501


        :return: The bucket of this StorageS3credential.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this StorageS3credential.


        :param bucket: The bucket of this StorageS3credential.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def key(self):
        """Gets the key of this StorageS3credential.  # noqa: E501


        :return: The key of this StorageS3credential.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this StorageS3credential.


        :param key: The key of this StorageS3credential.  # noqa: E501
        :type: str
        """

        self._key = key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageS3credential):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageS3credential):
            return True

        return self.to_dict() != other.to_dict()
