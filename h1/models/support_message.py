# coding: utf-8

"""
    HyperOne

    HyperOne API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from h1.configuration import Configuration


class SupportMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'type': 'str',
        'user': 'str',
        'data': 'MessageData',
        'origin': 'str',
        'date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'user': 'user',
        'data': 'data',
        'origin': 'origin',
        'date': 'date'
    }

    def __init__(self, id=None, type=None, user=None, data=None, origin=None, date=None, local_vars_configuration=None):  # noqa: E501
        """SupportMessage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._user = None
        self._data = None
        self._origin = None
        self._date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.type = type
        if user is not None:
            self.user = user
        if data is not None:
            self.data = data
        if origin is not None:
            self.origin = origin
        if date is not None:
            self.date = date

    @property
    def id(self):
        """Gets the id of this SupportMessage.  # noqa: E501


        :return: The id of this SupportMessage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SupportMessage.


        :param id: The id of this SupportMessage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this SupportMessage.  # noqa: E501


        :return: The type of this SupportMessage.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SupportMessage.


        :param type: The type of this SupportMessage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["text", "attachment"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user(self):
        """Gets the user of this SupportMessage.  # noqa: E501


        :return: The user of this SupportMessage.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SupportMessage.


        :param user: The user of this SupportMessage.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def data(self):
        """Gets the data of this SupportMessage.  # noqa: E501


        :return: The data of this SupportMessage.  # noqa: E501
        :rtype: MessageData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SupportMessage.


        :param data: The data of this SupportMessage.  # noqa: E501
        :type: MessageData
        """

        self._data = data

    @property
    def origin(self):
        """Gets the origin of this SupportMessage.  # noqa: E501


        :return: The origin of this SupportMessage.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this SupportMessage.


        :param origin: The origin of this SupportMessage.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def date(self):
        """Gets the date of this SupportMessage.  # noqa: E501


        :return: The date of this SupportMessage.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this SupportMessage.


        :param date: The date of this SupportMessage.  # noqa: E501
        :type: datetime
        """

        self._date = date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportMessage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SupportMessage):
            return True

        return self.to_dict() != other.to_dict()
