# coding: utf-8

"""
    HyperOne

    HyperOne API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from h1.configuration import Configuration


class Service(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'resource': 'str',
        'type': 'str',
        'billing': 'ServiceBilling',
        'display': 'ServiceDisplay',
        'data': 'dict(str, str)',
        'name': 'str',
        'available_services': 'list[str]',
        'uri': 'str'
    }

    attribute_map = {
        'id': 'id',
        'resource': 'resource',
        'type': 'type',
        'billing': 'billing',
        'display': 'display',
        'data': 'data',
        'name': 'name',
        'available_services': 'availableServices',
        'uri': 'uri'
    }

    def __init__(self, id=None, resource=None, type=None, billing=None, display=None, data=None, name=None, available_services=None, uri=None, local_vars_configuration=None):  # noqa: E501
        """Service - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._resource = None
        self._type = None
        self._billing = None
        self._display = None
        self._data = None
        self._name = None
        self._available_services = None
        self._uri = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if resource is not None:
            self.resource = resource
        if type is not None:
            self.type = type
        if billing is not None:
            self.billing = billing
        if display is not None:
            self.display = display
        if data is not None:
            self.data = data
        if name is not None:
            self.name = name
        if available_services is not None:
            self.available_services = available_services
        if uri is not None:
            self.uri = uri

    @property
    def id(self):
        """Gets the id of this Service.  # noqa: E501


        :return: The id of this Service.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Service.


        :param id: The id of this Service.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource(self):
        """Gets the resource of this Service.  # noqa: E501


        :return: The resource of this Service.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Service.


        :param resource: The resource of this Service.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def type(self):
        """Gets the type of this Service.  # noqa: E501


        :return: The type of this Service.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Service.


        :param type: The type of this Service.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def billing(self):
        """Gets the billing of this Service.  # noqa: E501


        :return: The billing of this Service.  # noqa: E501
        :rtype: ServiceBilling
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this Service.


        :param billing: The billing of this Service.  # noqa: E501
        :type: ServiceBilling
        """

        self._billing = billing

    @property
    def display(self):
        """Gets the display of this Service.  # noqa: E501


        :return: The display of this Service.  # noqa: E501
        :rtype: ServiceDisplay
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Service.


        :param display: The display of this Service.  # noqa: E501
        :type: ServiceDisplay
        """

        self._display = display

    @property
    def data(self):
        """Gets the data of this Service.  # noqa: E501


        :return: The data of this Service.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Service.


        :param data: The data of this Service.  # noqa: E501
        :type: dict(str, str)
        """

        self._data = data

    @property
    def name(self):
        """Gets the name of this Service.  # noqa: E501


        :return: The name of this Service.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.


        :param name: The name of this Service.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def available_services(self):
        """Gets the available_services of this Service.  # noqa: E501


        :return: The available_services of this Service.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_services

    @available_services.setter
    def available_services(self, available_services):
        """Sets the available_services of this Service.


        :param available_services: The available_services of this Service.  # noqa: E501
        :type: list[str]
        """

        self._available_services = available_services

    @property
    def uri(self):
        """Gets the uri of this Service.  # noqa: E501


        :return: The uri of this Service.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Service.


        :param uri: The uri of this Service.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Service):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Service):
            return True

        return self.to_dict() != other.to_dict()
