"""
    HyperOne

    HyperOne API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h1.api_client import ApiClient, Endpoint as _Endpoint
from h1.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from h1.model.development import Development
from h1.model.development_credential import DevelopmentCredential
from h1.model.domain import Domain
from h1.model.event import Event
from h1.model.inline_response400 import InlineResponse400
from h1.model.metric import Metric
from h1.model.point import Point
from h1.model.provider_env import ProviderEnv
from h1.model.provider_link import ProviderLink
from h1.model.provider_log import ProviderLog
from h1.model.provider_project_development_create import ProviderProjectDevelopmentCreate
from h1.model.provider_project_development_credential_patch import ProviderProjectDevelopmentCredentialPatch
from h1.model.provider_project_development_snapshot_download import ProviderProjectDevelopmentSnapshotDownload
from h1.model.provider_project_development_transfer import ProviderProjectDevelopmentTransfer
from h1.model.provider_project_development_update import ProviderProjectDevelopmentUpdate
from h1.model.provider_sideapp import ProviderSideapp
from h1.model.provider_snapshot import ProviderSnapshot
from h1.model.resource_connect import ResourceConnect
from h1.model.resource_service import ResourceService
from h1.model.tag import Tag
from h1.model.tag_array import TagArray


class ProviderProjectDevelopmentApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __provider_project_development_connect_get(
            self,
            project_id,
            location_id,
            development_id,
            connect_id,
            **kwargs
        ):
            """Get provider/development.connect  # noqa: E501

            Get provider/development.connect  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_connect_get(project_id, location_id, development_id, connect_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                connect_id (str): connectId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResourceConnect
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['connect_id'] = \
                connect_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_connect_get = _Endpoint(
            settings={
                'response_type': (ResourceConnect,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/connect/{connectId}',
                'operation_id': 'provider_project_development_connect_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'connect_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'connect_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'connect_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'connect_id': 'connectId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'connect_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_connect_get
        )

        def __provider_project_development_connect_list(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """List provider/development.connect  # noqa: E501

            List provider/development.connect  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_connect_list(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ResourceConnect]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_connect_list = _Endpoint(
            settings={
                'response_type': ([ResourceConnect],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/connect',
                'operation_id': 'provider_project_development_connect_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_connect_list
        )

        def __provider_project_development_create(
            self,
            project_id,
            location_id,
            provider_project_development_create,
            **kwargs
        ):
            """Create provider/development  # noqa: E501

            Create development  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_create(project_id, location_id, provider_project_development_create, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                provider_project_development_create (ProviderProjectDevelopmentCreate):

            Keyword Args:
                x_idempotency_key (str): Idempotency key. [optional]
                x_dry_run (str): Dry run. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Development
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['provider_project_development_create'] = \
                provider_project_development_create
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_create = _Endpoint(
            settings={
                'response_type': (Development,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development',
                'operation_id': 'provider_project_development_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'provider_project_development_create',
                    'x_idempotency_key',
                    'x_dry_run',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'provider_project_development_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'provider_project_development_create':
                        (ProviderProjectDevelopmentCreate,),
                    'x_idempotency_key':
                        (str,),
                    'x_dry_run':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'x_idempotency_key': 'x-idempotency-key',
                    'x_dry_run': 'x-dry-run',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'provider_project_development_create': 'body',
                    'x_idempotency_key': 'header',
                    'x_dry_run': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__provider_project_development_create
        )

        def __provider_project_development_credential_create(
            self,
            project_id,
            location_id,
            development_id,
            development_credential,
            **kwargs
        ):
            """Create provider/development.credential  # noqa: E501

            Create provider/development.credential  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_credential_create(project_id, location_id, development_id, development_credential, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                development_credential (DevelopmentCredential):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DevelopmentCredential
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['development_credential'] = \
                development_credential
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_credential_create = _Endpoint(
            settings={
                'response_type': (DevelopmentCredential,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/credential',
                'operation_id': 'provider_project_development_credential_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'development_credential',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'development_credential',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'development_credential':
                        (DevelopmentCredential,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'development_credential': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__provider_project_development_credential_create
        )

        def __provider_project_development_credential_delete(
            self,
            project_id,
            location_id,
            development_id,
            credential_id,
            **kwargs
        ):
            """Delete provider/development.credential  # noqa: E501

            Delete provider/development.credential  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_credential_delete(project_id, location_id, development_id, credential_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                credential_id (str): credentialId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Development
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['credential_id'] = \
                credential_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_credential_delete = _Endpoint(
            settings={
                'response_type': (Development,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/credential/{credentialId}',
                'operation_id': 'provider_project_development_credential_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'credential_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'credential_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'credential_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'credential_id': 'credentialId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'credential_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_credential_delete
        )

        def __provider_project_development_credential_get(
            self,
            project_id,
            location_id,
            development_id,
            credential_id,
            **kwargs
        ):
            """Get provider/development.credential  # noqa: E501

            Get provider/development.credential  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_credential_get(project_id, location_id, development_id, credential_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                credential_id (str): credentialId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DevelopmentCredential
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['credential_id'] = \
                credential_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_credential_get = _Endpoint(
            settings={
                'response_type': (DevelopmentCredential,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/credential/{credentialId}',
                'operation_id': 'provider_project_development_credential_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'credential_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'credential_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'credential_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'credential_id': 'credentialId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'credential_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_credential_get
        )

        def __provider_project_development_credential_list(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """List provider/development.credential  # noqa: E501

            List provider/development.credential  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_credential_list(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [DevelopmentCredential]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_credential_list = _Endpoint(
            settings={
                'response_type': ([DevelopmentCredential],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/credential',
                'operation_id': 'provider_project_development_credential_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_credential_list
        )

        def __provider_project_development_credential_patch(
            self,
            project_id,
            location_id,
            development_id,
            credential_id,
            provider_project_development_credential_patch,
            **kwargs
        ):
            """Update provider/development.credential  # noqa: E501

            Update provider/development.credential  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_credential_patch(project_id, location_id, development_id, credential_id, provider_project_development_credential_patch, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                credential_id (str): credentialId
                provider_project_development_credential_patch (ProviderProjectDevelopmentCredentialPatch):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DevelopmentCredential
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['credential_id'] = \
                credential_id
            kwargs['provider_project_development_credential_patch'] = \
                provider_project_development_credential_patch
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_credential_patch = _Endpoint(
            settings={
                'response_type': (DevelopmentCredential,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/credential/{credentialId}',
                'operation_id': 'provider_project_development_credential_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'credential_id',
                    'provider_project_development_credential_patch',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'credential_id',
                    'provider_project_development_credential_patch',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'credential_id':
                        (str,),
                    'provider_project_development_credential_patch':
                        (ProviderProjectDevelopmentCredentialPatch,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'credential_id': 'credentialId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'credential_id': 'path',
                    'provider_project_development_credential_patch': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__provider_project_development_credential_patch
        )

        def __provider_project_development_delete(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """Delete provider/development  # noqa: E501

            Delete development  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_delete(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}',
                'operation_id': 'provider_project_development_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_delete
        )

        def __provider_project_development_domain_create(
            self,
            project_id,
            location_id,
            development_id,
            domain,
            **kwargs
        ):
            """Create provider/development.domain  # noqa: E501

            Create provider/development.domain  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_domain_create(project_id, location_id, development_id, domain, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                domain (Domain):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Domain
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['domain'] = \
                domain
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_domain_create = _Endpoint(
            settings={
                'response_type': (Domain,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/domain',
                'operation_id': 'provider_project_development_domain_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'domain',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'domain',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'domain':
                        (Domain,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'domain': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__provider_project_development_domain_create
        )

        def __provider_project_development_domain_delete(
            self,
            project_id,
            location_id,
            development_id,
            domain_id,
            **kwargs
        ):
            """Delete provider/development.domain  # noqa: E501

            Delete provider/development.domain  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_domain_delete(project_id, location_id, development_id, domain_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                domain_id (str): domainId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['domain_id'] = \
                domain_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_domain_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/domain/{domainId}',
                'operation_id': 'provider_project_development_domain_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'domain_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'domain_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'domain_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'domain_id': 'domainId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'domain_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_domain_delete
        )

        def __provider_project_development_domain_get(
            self,
            project_id,
            location_id,
            development_id,
            domain_id,
            **kwargs
        ):
            """Get provider/development.domain  # noqa: E501

            Get provider/development.domain  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_domain_get(project_id, location_id, development_id, domain_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                domain_id (str): domainId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Domain
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['domain_id'] = \
                domain_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_domain_get = _Endpoint(
            settings={
                'response_type': (Domain,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/domain/{domainId}',
                'operation_id': 'provider_project_development_domain_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'domain_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'domain_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'domain_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'domain_id': 'domainId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'domain_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_domain_get
        )

        def __provider_project_development_domain_list(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """List provider/development.domain  # noqa: E501

            List provider/development.domain  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_domain_list(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Domain]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_domain_list = _Endpoint(
            settings={
                'response_type': ([Domain],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/domain',
                'operation_id': 'provider_project_development_domain_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_domain_list
        )

        def __provider_project_development_env_create(
            self,
            project_id,
            location_id,
            development_id,
            provider_env,
            **kwargs
        ):
            """Create provider/development.env  # noqa: E501

            Create provider/development.env  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_env_create(project_id, location_id, development_id, provider_env, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                provider_env (ProviderEnv):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProviderEnv
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['provider_env'] = \
                provider_env
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_env_create = _Endpoint(
            settings={
                'response_type': (ProviderEnv,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/env',
                'operation_id': 'provider_project_development_env_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'provider_env',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'provider_env',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'provider_env':
                        (ProviderEnv,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'provider_env': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__provider_project_development_env_create
        )

        def __provider_project_development_env_delete(
            self,
            project_id,
            location_id,
            development_id,
            env_id,
            **kwargs
        ):
            """Delete provider/development.env  # noqa: E501

            Delete provider/development.env  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_env_delete(project_id, location_id, development_id, env_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                env_id (str): envId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['env_id'] = \
                env_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_env_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/env/{envId}',
                'operation_id': 'provider_project_development_env_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'env_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'env_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'env_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'env_id': 'envId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'env_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_env_delete
        )

        def __provider_project_development_env_get(
            self,
            project_id,
            location_id,
            development_id,
            env_id,
            **kwargs
        ):
            """Get provider/development.env  # noqa: E501

            Get provider/development.env  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_env_get(project_id, location_id, development_id, env_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                env_id (str): envId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProviderEnv
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['env_id'] = \
                env_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_env_get = _Endpoint(
            settings={
                'response_type': (ProviderEnv,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/env/{envId}',
                'operation_id': 'provider_project_development_env_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'env_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'env_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'env_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'env_id': 'envId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'env_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_env_get
        )

        def __provider_project_development_env_list(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """List provider/development.env  # noqa: E501

            List provider/development.env  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_env_list(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ProviderEnv]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_env_list = _Endpoint(
            settings={
                'response_type': ([ProviderEnv],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/env',
                'operation_id': 'provider_project_development_env_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_env_list
        )

        def __provider_project_development_event_get(
            self,
            project_id,
            location_id,
            development_id,
            event_id,
            **kwargs
        ):
            """Get provider/development.event  # noqa: E501

            Get provider/development.event  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_event_get(project_id, location_id, development_id, event_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                event_id (str): eventId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Event
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['event_id'] = \
                event_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_event_get = _Endpoint(
            settings={
                'response_type': (Event,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/event/{eventId}',
                'operation_id': 'provider_project_development_event_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'event_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'event_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'event_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'event_id': 'eventId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'event_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_event_get
        )

        def __provider_project_development_event_list(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """List provider/development.event  # noqa: E501

            List provider/development.event  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_event_list(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                limit (float): $limit. [optional] if omitted the server will use the default value of 100
                skip (float): $skip. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Event]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_event_list = _Endpoint(
            settings={
                'response_type': ([Event],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/event',
                'operation_id': 'provider_project_development_event_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'limit',
                    'skip',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'limit':
                        (float,),
                    'skip':
                        (float,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'limit': '$limit',
                    'skip': '$skip',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'limit': 'query',
                    'skip': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_event_list
        )

        def __provider_project_development_get(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """Get provider/development  # noqa: E501

            Returns a single development  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_get(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Development
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_get = _Endpoint(
            settings={
                'response_type': (Development,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}',
                'operation_id': 'provider_project_development_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_get
        )

        def __provider_project_development_link_create(
            self,
            project_id,
            location_id,
            development_id,
            provider_link,
            **kwargs
        ):
            """Create provider/development.link  # noqa: E501

            Create provider/development.link  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_link_create(project_id, location_id, development_id, provider_link, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                provider_link (ProviderLink):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProviderLink
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['provider_link'] = \
                provider_link
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_link_create = _Endpoint(
            settings={
                'response_type': (ProviderLink,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/link',
                'operation_id': 'provider_project_development_link_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'provider_link',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'provider_link',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'provider_link':
                        (ProviderLink,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'provider_link': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__provider_project_development_link_create
        )

        def __provider_project_development_link_delete(
            self,
            project_id,
            location_id,
            development_id,
            link_id,
            **kwargs
        ):
            """Delete provider/development.link  # noqa: E501

            Delete provider/development.link  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_link_delete(project_id, location_id, development_id, link_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                link_id (str): linkId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['link_id'] = \
                link_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_link_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/link/{linkId}',
                'operation_id': 'provider_project_development_link_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'link_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'link_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'link_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'link_id': 'linkId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'link_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_link_delete
        )

        def __provider_project_development_link_get(
            self,
            project_id,
            location_id,
            development_id,
            link_id,
            **kwargs
        ):
            """Get provider/development.link  # noqa: E501

            Get provider/development.link  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_link_get(project_id, location_id, development_id, link_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                link_id (str): linkId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProviderLink
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['link_id'] = \
                link_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_link_get = _Endpoint(
            settings={
                'response_type': (ProviderLink,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/link/{linkId}',
                'operation_id': 'provider_project_development_link_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'link_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'link_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'link_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'link_id': 'linkId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'link_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_link_get
        )

        def __provider_project_development_link_list(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """List provider/development.link  # noqa: E501

            List provider/development.link  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_link_list(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ProviderLink]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_link_list = _Endpoint(
            settings={
                'response_type': ([ProviderLink],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/link',
                'operation_id': 'provider_project_development_link_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_link_list
        )

        def __provider_project_development_list(
            self,
            project_id,
            location_id,
            **kwargs
        ):
            """List provider/development  # noqa: E501

            List development  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_list(project_id, location_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id

            Keyword Args:
                name (str): Filter by name. [optional]
                tag_value (str): Filter by tag.value. [optional]
                tag_key (str): Filter by tag.key. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Development]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_list = _Endpoint(
            settings={
                'response_type': ([Development],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development',
                'operation_id': 'provider_project_development_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'name',
                    'tag_value',
                    'tag_key',
                ],
                'required': [
                    'project_id',
                    'location_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'name':
                        (str,),
                    'tag_value':
                        (str,),
                    'tag_key':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'name': 'name',
                    'tag_value': 'tag.value',
                    'tag_key': 'tag.key',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'name': 'query',
                    'tag_value': 'query',
                    'tag_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_list
        )

        def __provider_project_development_log_get(
            self,
            project_id,
            location_id,
            development_id,
            log_id,
            **kwargs
        ):
            """Get provider/development.log  # noqa: E501

            Get provider/development.log  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_log_get(project_id, location_id, development_id, log_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                log_id (str): logId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProviderLog
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['log_id'] = \
                log_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_log_get = _Endpoint(
            settings={
                'response_type': (ProviderLog,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/log/{logId}',
                'operation_id': 'provider_project_development_log_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'log_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'log_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'log_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'log_id': 'logId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'log_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_log_get
        )

        def __provider_project_development_log_list(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """List provider/development.log  # noqa: E501

            List provider/development.log  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_log_list(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ProviderLog]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_log_list = _Endpoint(
            settings={
                'response_type': ([ProviderLog],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/log',
                'operation_id': 'provider_project_development_log_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_log_list
        )

        def __provider_project_development_log_read(
            self,
            project_id,
            location_id,
            development_id,
            log_id,
            **kwargs
        ):
            """Read provider/development.log  # noqa: E501

            action read  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_log_read(project_id, location_id, development_id, log_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                log_id (str): logId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['log_id'] = \
                log_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_log_read = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/log/{logId}/actions/read',
                'operation_id': 'provider_project_development_log_read',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'log_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'log_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'log_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'log_id': 'logId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'log_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_log_read
        )

        def __provider_project_development_metric_get(
            self,
            project_id,
            location_id,
            development_id,
            metric_id,
            **kwargs
        ):
            """Get provider/development.metric  # noqa: E501

            Get provider/development.metric  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_metric_get(project_id, location_id, development_id, metric_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                metric_id (str): metricId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Metric
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['metric_id'] = \
                metric_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_metric_get = _Endpoint(
            settings={
                'response_type': (Metric,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/metric/{metricId}',
                'operation_id': 'provider_project_development_metric_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'metric_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'metric_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'metric_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'metric_id': 'metricId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'metric_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_metric_get
        )

        def __provider_project_development_metric_list(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """List provider/development.metric  # noqa: E501

            List provider/development.metric  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_metric_list(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Metric]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_metric_list = _Endpoint(
            settings={
                'response_type': ([Metric],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/metric',
                'operation_id': 'provider_project_development_metric_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_metric_list
        )

        def __provider_project_development_metric_point_list(
            self,
            project_id,
            location_id,
            development_id,
            metric_id,
            **kwargs
        ):
            """List provider/development.point  # noqa: E501

            List provider/development.point  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_metric_point_list(project_id, location_id, development_id, metric_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                metric_id (str): metricId

            Keyword Args:
                interval (str): interval. [optional]
                timespan (str): timespan. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Point]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['metric_id'] = \
                metric_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_metric_point_list = _Endpoint(
            settings={
                'response_type': ([Point],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/metric/{metricId}/point',
                'operation_id': 'provider_project_development_metric_point_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'metric_id',
                    'interval',
                    'timespan',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'metric_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'metric_id':
                        (str,),
                    'interval':
                        (str,),
                    'timespan':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'metric_id': 'metricId',
                    'interval': 'interval',
                    'timespan': 'timespan',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'metric_id': 'path',
                    'interval': 'query',
                    'timespan': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_metric_point_list
        )

        def __provider_project_development_restart(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """Restart provider/development  # noqa: E501

            action restart  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_restart(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                x_idempotency_key (str): Idempotency key. [optional]
                x_dry_run (str): Dry run. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Development
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_restart = _Endpoint(
            settings={
                'response_type': (Development,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/actions/restart',
                'operation_id': 'provider_project_development_restart',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'x_idempotency_key',
                    'x_dry_run',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'x_idempotency_key':
                        (str,),
                    'x_dry_run':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'x_idempotency_key': 'x-idempotency-key',
                    'x_dry_run': 'x-dry-run',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'x_idempotency_key': 'header',
                    'x_dry_run': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_restart
        )

        def __provider_project_development_service_get(
            self,
            project_id,
            location_id,
            development_id,
            service_id,
            **kwargs
        ):
            """Get provider/development.service  # noqa: E501

            Get provider/development.service  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_service_get(project_id, location_id, development_id, service_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                service_id (str): serviceId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResourceService
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['service_id'] = \
                service_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_service_get = _Endpoint(
            settings={
                'response_type': (ResourceService,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/service/{serviceId}',
                'operation_id': 'provider_project_development_service_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'service_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'service_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'service_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'service_id': 'serviceId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'service_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_service_get
        )

        def __provider_project_development_service_list(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """List provider/development.service  # noqa: E501

            List provider/development.service  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_service_list(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ResourceService]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_service_list = _Endpoint(
            settings={
                'response_type': ([ResourceService],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/service',
                'operation_id': 'provider_project_development_service_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_service_list
        )

        def __provider_project_development_sideapp_get(
            self,
            project_id,
            location_id,
            development_id,
            sideapp_id,
            **kwargs
        ):
            """Get provider/development.sideapp  # noqa: E501

            Get provider/development.sideapp  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_sideapp_get(project_id, location_id, development_id, sideapp_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                sideapp_id (str): sideappId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProviderSideapp
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['sideapp_id'] = \
                sideapp_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_sideapp_get = _Endpoint(
            settings={
                'response_type': (ProviderSideapp,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/sideapp/{sideappId}',
                'operation_id': 'provider_project_development_sideapp_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'sideapp_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'sideapp_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'sideapp_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'sideapp_id': 'sideappId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'sideapp_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_sideapp_get
        )

        def __provider_project_development_sideapp_list(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """List provider/development.sideapp  # noqa: E501

            List provider/development.sideapp  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_sideapp_list(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ProviderSideapp]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_sideapp_list = _Endpoint(
            settings={
                'response_type': ([ProviderSideapp],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/sideapp',
                'operation_id': 'provider_project_development_sideapp_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_sideapp_list
        )

        def __provider_project_development_sideapp_open(
            self,
            project_id,
            location_id,
            development_id,
            sideapp_id,
            **kwargs
        ):
            """Open provider/development.sideapp  # noqa: E501

            action open  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_sideapp_open(project_id, location_id, development_id, sideapp_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                sideapp_id (str): sideappId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['sideapp_id'] = \
                sideapp_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_sideapp_open = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/sideapp/{sideappId}/actions/open',
                'operation_id': 'provider_project_development_sideapp_open',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'sideapp_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'sideapp_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'sideapp_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'sideapp_id': 'sideappId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'sideapp_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_sideapp_open
        )

        def __provider_project_development_snapshot_create(
            self,
            project_id,
            location_id,
            development_id,
            provider_snapshot,
            **kwargs
        ):
            """Create provider/development.snapshot  # noqa: E501

            Create provider/development.snapshot  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_snapshot_create(project_id, location_id, development_id, provider_snapshot, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                provider_snapshot (ProviderSnapshot):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProviderSnapshot
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['provider_snapshot'] = \
                provider_snapshot
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_snapshot_create = _Endpoint(
            settings={
                'response_type': (ProviderSnapshot,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/snapshot',
                'operation_id': 'provider_project_development_snapshot_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'provider_snapshot',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'provider_snapshot',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'provider_snapshot':
                        (ProviderSnapshot,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'provider_snapshot': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__provider_project_development_snapshot_create
        )

        def __provider_project_development_snapshot_delete(
            self,
            project_id,
            location_id,
            development_id,
            snapshot_id,
            **kwargs
        ):
            """Delete provider/development.snapshot  # noqa: E501

            Delete provider/development.snapshot  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_snapshot_delete(project_id, location_id, development_id, snapshot_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                snapshot_id (str): snapshotId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Development
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['snapshot_id'] = \
                snapshot_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_snapshot_delete = _Endpoint(
            settings={
                'response_type': (Development,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/snapshot/{snapshotId}',
                'operation_id': 'provider_project_development_snapshot_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'snapshot_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'snapshot_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'snapshot_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_snapshot_delete
        )

        def __provider_project_development_snapshot_download(
            self,
            project_id,
            location_id,
            development_id,
            snapshot_id,
            provider_project_development_snapshot_download,
            **kwargs
        ):
            """Download provider/development.snapshot  # noqa: E501

            action download  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_snapshot_download(project_id, location_id, development_id, snapshot_id, provider_project_development_snapshot_download, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                snapshot_id (str): snapshotId
                provider_project_development_snapshot_download (ProviderProjectDevelopmentSnapshotDownload):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['snapshot_id'] = \
                snapshot_id
            kwargs['provider_project_development_snapshot_download'] = \
                provider_project_development_snapshot_download
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_snapshot_download = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/snapshot/{snapshotId}/actions/download',
                'operation_id': 'provider_project_development_snapshot_download',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'snapshot_id',
                    'provider_project_development_snapshot_download',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'snapshot_id',
                    'provider_project_development_snapshot_download',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'snapshot_id':
                        (str,),
                    'provider_project_development_snapshot_download':
                        (ProviderProjectDevelopmentSnapshotDownload,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'snapshot_id': 'path',
                    'provider_project_development_snapshot_download': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__provider_project_development_snapshot_download
        )

        def __provider_project_development_snapshot_get(
            self,
            project_id,
            location_id,
            development_id,
            snapshot_id,
            **kwargs
        ):
            """Get provider/development.snapshot  # noqa: E501

            Get provider/development.snapshot  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_snapshot_get(project_id, location_id, development_id, snapshot_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                snapshot_id (str): snapshotId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProviderSnapshot
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['snapshot_id'] = \
                snapshot_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_snapshot_get = _Endpoint(
            settings={
                'response_type': (ProviderSnapshot,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/snapshot/{snapshotId}',
                'operation_id': 'provider_project_development_snapshot_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'snapshot_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'snapshot_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'snapshot_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_snapshot_get
        )

        def __provider_project_development_snapshot_list(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """List provider/development.snapshot  # noqa: E501

            List provider/development.snapshot  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_snapshot_list(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ProviderSnapshot]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_snapshot_list = _Endpoint(
            settings={
                'response_type': ([ProviderSnapshot],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/snapshot',
                'operation_id': 'provider_project_development_snapshot_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_snapshot_list
        )

        def __provider_project_development_start(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """Start provider/development  # noqa: E501

            action start  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_start(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                x_idempotency_key (str): Idempotency key. [optional]
                x_dry_run (str): Dry run. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Development
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_start = _Endpoint(
            settings={
                'response_type': (Development,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/actions/start',
                'operation_id': 'provider_project_development_start',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'x_idempotency_key',
                    'x_dry_run',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'x_idempotency_key':
                        (str,),
                    'x_dry_run':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'x_idempotency_key': 'x-idempotency-key',
                    'x_dry_run': 'x-dry-run',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'x_idempotency_key': 'header',
                    'x_dry_run': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_start
        )

        def __provider_project_development_stop(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """Stop provider/development  # noqa: E501

            action stop  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_stop(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                x_idempotency_key (str): Idempotency key. [optional]
                x_dry_run (str): Dry run. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Development
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_stop = _Endpoint(
            settings={
                'response_type': (Development,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/actions/stop',
                'operation_id': 'provider_project_development_stop',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'x_idempotency_key',
                    'x_dry_run',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'x_idempotency_key':
                        (str,),
                    'x_dry_run':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'x_idempotency_key': 'x-idempotency-key',
                    'x_dry_run': 'x-dry-run',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'x_idempotency_key': 'header',
                    'x_dry_run': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_stop
        )

        def __provider_project_development_tag_create(
            self,
            project_id,
            location_id,
            development_id,
            tag,
            **kwargs
        ):
            """Create provider/development.tag  # noqa: E501

            Create provider/development.tag  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_tag_create(project_id, location_id, development_id, tag, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                tag (Tag):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Tag
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['tag'] = \
                tag
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_tag_create = _Endpoint(
            settings={
                'response_type': (Tag,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/tag',
                'operation_id': 'provider_project_development_tag_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'tag',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'tag',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'tag':
                        (Tag,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'tag': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__provider_project_development_tag_create
        )

        def __provider_project_development_tag_delete(
            self,
            project_id,
            location_id,
            development_id,
            tag_id,
            **kwargs
        ):
            """Delete provider/development.tag  # noqa: E501

            Delete provider/development.tag  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_tag_delete(project_id, location_id, development_id, tag_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                tag_id (str): tagId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['tag_id'] = \
                tag_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_tag_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/tag/{tagId}',
                'operation_id': 'provider_project_development_tag_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'tag_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'tag_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'tag_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'tag_id': 'tagId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'tag_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_tag_delete
        )

        def __provider_project_development_tag_get(
            self,
            project_id,
            location_id,
            development_id,
            tag_id,
            **kwargs
        ):
            """Get provider/development.tag  # noqa: E501

            Get provider/development.tag  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_tag_get(project_id, location_id, development_id, tag_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                tag_id (str): tagId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Tag
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['tag_id'] = \
                tag_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_tag_get = _Endpoint(
            settings={
                'response_type': (Tag,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/tag/{tagId}',
                'operation_id': 'provider_project_development_tag_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'tag_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'tag_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'tag_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'tag_id': 'tagId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'tag_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_tag_get
        )

        def __provider_project_development_tag_list(
            self,
            project_id,
            location_id,
            development_id,
            **kwargs
        ):
            """List provider/development.tag  # noqa: E501

            List provider/development.tag  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_tag_list(project_id, location_id, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Tag]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_tag_list = _Endpoint(
            settings={
                'response_type': ([Tag],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/tag',
                'operation_id': 'provider_project_development_tag_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__provider_project_development_tag_list
        )

        def __provider_project_development_tag_put(
            self,
            project_id,
            location_id,
            development_id,
            tag_array,
            **kwargs
        ):
            """Replace provider/development.tag  # noqa: E501

            Replace provider/development.tag  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_tag_put(project_id, location_id, development_id, tag_array, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                tag_array (TagArray):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Tag]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['tag_array'] = \
                tag_array
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_tag_put = _Endpoint(
            settings={
                'response_type': ([Tag],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/tag',
                'operation_id': 'provider_project_development_tag_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'tag_array',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'tag_array',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'tag_array':
                        (TagArray,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'tag_array': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__provider_project_development_tag_put
        )

        def __provider_project_development_transfer(
            self,
            project_id,
            location_id,
            development_id,
            provider_project_development_transfer,
            **kwargs
        ):
            """Transfer provider/development  # noqa: E501

            action transfer  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_transfer(project_id, location_id, development_id, provider_project_development_transfer, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                provider_project_development_transfer (ProviderProjectDevelopmentTransfer):

            Keyword Args:
                x_idempotency_key (str): Idempotency key. [optional]
                x_dry_run (str): Dry run. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Development
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['provider_project_development_transfer'] = \
                provider_project_development_transfer
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_transfer = _Endpoint(
            settings={
                'response_type': (Development,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}/actions/transfer',
                'operation_id': 'provider_project_development_transfer',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'provider_project_development_transfer',
                    'x_idempotency_key',
                    'x_dry_run',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'provider_project_development_transfer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'provider_project_development_transfer':
                        (ProviderProjectDevelopmentTransfer,),
                    'x_idempotency_key':
                        (str,),
                    'x_dry_run':
                        (str,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                    'x_idempotency_key': 'x-idempotency-key',
                    'x_dry_run': 'x-dry-run',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'provider_project_development_transfer': 'body',
                    'x_idempotency_key': 'header',
                    'x_dry_run': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__provider_project_development_transfer
        )

        def __provider_project_development_update(
            self,
            project_id,
            location_id,
            development_id,
            provider_project_development_update,
            **kwargs
        ):
            """Update provider/development  # noqa: E501

            Returns modified development  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.provider_project_development_update(project_id, location_id, development_id, provider_project_development_update, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): Project Id
                location_id (str): Location Id
                development_id (str): Development Id
                provider_project_development_update (ProviderProjectDevelopmentUpdate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Development
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            kwargs['location_id'] = \
                location_id
            kwargs['development_id'] = \
                development_id
            kwargs['provider_project_development_update'] = \
                provider_project_development_update
            return self.call_with_http_info(**kwargs)

        self.provider_project_development_update = _Endpoint(
            settings={
                'response_type': (Development,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/provider/{locationId}/project/{projectId}/development/{developmentId}',
                'operation_id': 'provider_project_development_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'provider_project_development_update',
                ],
                'required': [
                    'project_id',
                    'location_id',
                    'development_id',
                    'provider_project_development_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'location_id':
                        (str,),
                    'development_id':
                        (str,),
                    'provider_project_development_update':
                        (ProviderProjectDevelopmentUpdate,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'location_id': 'locationId',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'project_id': 'path',
                    'location_id': 'path',
                    'development_id': 'path',
                    'provider_project_development_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__provider_project_development_update
        )
