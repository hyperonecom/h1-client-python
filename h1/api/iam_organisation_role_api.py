"""
    HyperOne

    HyperOne API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h1.api_client import ApiClient, Endpoint as _Endpoint
from h1.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from h1.model.event import Event
from h1.model.iam_permission import IamPermission
from h1.model.iam_permission_array import IamPermissionArray
from h1.model.iam_project_role_create import IamProjectRoleCreate
from h1.model.iam_project_role_update import IamProjectRoleUpdate
from h1.model.inline_response400 import InlineResponse400
from h1.model.resource_service import ResourceService
from h1.model.role import Role
from h1.model.tag import Tag
from h1.model.tag_array import TagArray


class IamOrganisationRoleApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __iam_organisation_role_create(
            self,
            organisation_id,
            iam_project_role_create,
            **kwargs
        ):
            """Create iam/role  # noqa: E501

            Create role  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_create(organisation_id, iam_project_role_create, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                iam_project_role_create (IamProjectRoleCreate):

            Keyword Args:
                x_idempotency_key (str): Idempotency key. [optional]
                x_dry_run (str): Dry run. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Role
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['iam_project_role_create'] = \
                iam_project_role_create
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_create = _Endpoint(
            settings={
                'response_type': (Role,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role',
                'operation_id': 'iam_organisation_role_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'iam_project_role_create',
                    'x_idempotency_key',
                    'x_dry_run',
                ],
                'required': [
                    'organisation_id',
                    'iam_project_role_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'iam_project_role_create':
                        (IamProjectRoleCreate,),
                    'x_idempotency_key':
                        (str,),
                    'x_dry_run':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'x_idempotency_key': 'x-idempotency-key',
                    'x_dry_run': 'x-dry-run',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'iam_project_role_create': 'body',
                    'x_idempotency_key': 'header',
                    'x_dry_run': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__iam_organisation_role_create
        )

        def __iam_organisation_role_delete(
            self,
            organisation_id,
            role_id,
            **kwargs
        ):
            """Delete iam/role  # noqa: E501

            Delete role  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_delete(organisation_id, role_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}',
                'operation_id': 'iam_organisation_role_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_role_delete
        )

        def __iam_organisation_role_event_get(
            self,
            organisation_id,
            role_id,
            event_id,
            **kwargs
        ):
            """Get iam/role.event  # noqa: E501

            Get iam/role.event  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_event_get(organisation_id, role_id, event_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id
                event_id (str): eventId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Event
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            kwargs['event_id'] = \
                event_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_event_get = _Endpoint(
            settings={
                'response_type': (Event,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}/event/{eventId}',
                'operation_id': 'iam_organisation_role_event_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                    'event_id',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                    'event_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                    'event_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                    'event_id': 'eventId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                    'event_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_role_event_get
        )

        def __iam_organisation_role_event_list(
            self,
            organisation_id,
            role_id,
            **kwargs
        ):
            """List iam/role.event  # noqa: E501

            List iam/role.event  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_event_list(organisation_id, role_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id

            Keyword Args:
                limit (float): $limit. [optional] if omitted the server will use the default value of 100
                skip (float): $skip. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Event]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_event_list = _Endpoint(
            settings={
                'response_type': ([Event],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}/event',
                'operation_id': 'iam_organisation_role_event_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                    'limit',
                    'skip',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                    'limit':
                        (float,),
                    'skip':
                        (float,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                    'limit': '$limit',
                    'skip': '$skip',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                    'limit': 'query',
                    'skip': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_role_event_list
        )

        def __iam_organisation_role_get(
            self,
            organisation_id,
            role_id,
            **kwargs
        ):
            """Get iam/role  # noqa: E501

            Returns a single role  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_get(organisation_id, role_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Role
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_get = _Endpoint(
            settings={
                'response_type': (Role,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}',
                'operation_id': 'iam_organisation_role_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_role_get
        )

        def __iam_organisation_role_list(
            self,
            organisation_id,
            **kwargs
        ):
            """List iam/role  # noqa: E501

            List role  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_list(organisation_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id

            Keyword Args:
                name (str): Filter by name. [optional]
                tag_value (str): Filter by tag.value. [optional]
                tag_key (str): Filter by tag.key. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Role]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_list = _Endpoint(
            settings={
                'response_type': ([Role],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role',
                'operation_id': 'iam_organisation_role_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'name',
                    'tag_value',
                    'tag_key',
                ],
                'required': [
                    'organisation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'name':
                        (str,),
                    'tag_value':
                        (str,),
                    'tag_key':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'name': 'name',
                    'tag_value': 'tag.value',
                    'tag_key': 'tag.key',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'name': 'query',
                    'tag_value': 'query',
                    'tag_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_role_list
        )

        def __iam_organisation_role_permission_create(
            self,
            organisation_id,
            role_id,
            iam_permission,
            **kwargs
        ):
            """Create iam/role.permission  # noqa: E501

            Create iam/role.permission  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_permission_create(organisation_id, role_id, iam_permission, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id
                iam_permission (IamPermission):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IamPermission
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            kwargs['iam_permission'] = \
                iam_permission
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_permission_create = _Endpoint(
            settings={
                'response_type': (IamPermission,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}/permission',
                'operation_id': 'iam_organisation_role_permission_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                    'iam_permission',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                    'iam_permission',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                    'iam_permission':
                        (IamPermission,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                    'iam_permission': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__iam_organisation_role_permission_create
        )

        def __iam_organisation_role_permission_delete(
            self,
            organisation_id,
            role_id,
            permission_id,
            **kwargs
        ):
            """Delete iam/role.permission  # noqa: E501

            Delete iam/role.permission  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_permission_delete(organisation_id, role_id, permission_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id
                permission_id (str): permissionId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IamPermission
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            kwargs['permission_id'] = \
                permission_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_permission_delete = _Endpoint(
            settings={
                'response_type': (IamPermission,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}/permission/{permissionId}',
                'operation_id': 'iam_organisation_role_permission_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                    'permission_id',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                    'permission_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                    'permission_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                    'permission_id': 'permissionId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                    'permission_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_role_permission_delete
        )

        def __iam_organisation_role_permission_get(
            self,
            organisation_id,
            role_id,
            permission_id,
            **kwargs
        ):
            """Get iam/role.permission  # noqa: E501

            Get iam/role.permission  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_permission_get(organisation_id, role_id, permission_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id
                permission_id (str): permissionId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IamPermission
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            kwargs['permission_id'] = \
                permission_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_permission_get = _Endpoint(
            settings={
                'response_type': (IamPermission,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}/permission/{permissionId}',
                'operation_id': 'iam_organisation_role_permission_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                    'permission_id',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                    'permission_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                    'permission_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                    'permission_id': 'permissionId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                    'permission_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_role_permission_get
        )

        def __iam_organisation_role_permission_list(
            self,
            organisation_id,
            role_id,
            **kwargs
        ):
            """List iam/role.permission  # noqa: E501

            List iam/role.permission  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_permission_list(organisation_id, role_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [IamPermission]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_permission_list = _Endpoint(
            settings={
                'response_type': ([IamPermission],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}/permission',
                'operation_id': 'iam_organisation_role_permission_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_role_permission_list
        )

        def __iam_organisation_role_permission_put(
            self,
            organisation_id,
            role_id,
            iam_permission_array,
            **kwargs
        ):
            """Replace iam/role.permission  # noqa: E501

            Replace iam/role.permission  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_permission_put(organisation_id, role_id, iam_permission_array, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id
                iam_permission_array (IamPermissionArray):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [IamPermission]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            kwargs['iam_permission_array'] = \
                iam_permission_array
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_permission_put = _Endpoint(
            settings={
                'response_type': ([IamPermission],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}/permission',
                'operation_id': 'iam_organisation_role_permission_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                    'iam_permission_array',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                    'iam_permission_array',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                    'iam_permission_array':
                        (IamPermissionArray,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                    'iam_permission_array': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__iam_organisation_role_permission_put
        )

        def __iam_organisation_role_service_get(
            self,
            organisation_id,
            role_id,
            service_id,
            **kwargs
        ):
            """Get iam/role.service  # noqa: E501

            Get iam/role.service  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_service_get(organisation_id, role_id, service_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id
                service_id (str): serviceId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResourceService
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            kwargs['service_id'] = \
                service_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_service_get = _Endpoint(
            settings={
                'response_type': (ResourceService,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}/service/{serviceId}',
                'operation_id': 'iam_organisation_role_service_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                    'service_id',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                    'service_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                    'service_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                    'service_id': 'serviceId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                    'service_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_role_service_get
        )

        def __iam_organisation_role_service_list(
            self,
            organisation_id,
            role_id,
            **kwargs
        ):
            """List iam/role.service  # noqa: E501

            List iam/role.service  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_service_list(organisation_id, role_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ResourceService]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_service_list = _Endpoint(
            settings={
                'response_type': ([ResourceService],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}/service',
                'operation_id': 'iam_organisation_role_service_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_role_service_list
        )

        def __iam_organisation_role_tag_create(
            self,
            organisation_id,
            role_id,
            tag,
            **kwargs
        ):
            """Create iam/role.tag  # noqa: E501

            Create iam/role.tag  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_tag_create(organisation_id, role_id, tag, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id
                tag (Tag):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Tag
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            kwargs['tag'] = \
                tag
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_tag_create = _Endpoint(
            settings={
                'response_type': (Tag,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}/tag',
                'operation_id': 'iam_organisation_role_tag_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                    'tag',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                    'tag',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                    'tag':
                        (Tag,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                    'tag': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__iam_organisation_role_tag_create
        )

        def __iam_organisation_role_tag_delete(
            self,
            organisation_id,
            role_id,
            tag_id,
            **kwargs
        ):
            """Delete iam/role.tag  # noqa: E501

            Delete iam/role.tag  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_tag_delete(organisation_id, role_id, tag_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id
                tag_id (str): tagId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            kwargs['tag_id'] = \
                tag_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_tag_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}/tag/{tagId}',
                'operation_id': 'iam_organisation_role_tag_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                    'tag_id',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                    'tag_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                    'tag_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                    'tag_id': 'tagId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                    'tag_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_role_tag_delete
        )

        def __iam_organisation_role_tag_get(
            self,
            organisation_id,
            role_id,
            tag_id,
            **kwargs
        ):
            """Get iam/role.tag  # noqa: E501

            Get iam/role.tag  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_tag_get(organisation_id, role_id, tag_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id
                tag_id (str): tagId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Tag
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            kwargs['tag_id'] = \
                tag_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_tag_get = _Endpoint(
            settings={
                'response_type': (Tag,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}/tag/{tagId}',
                'operation_id': 'iam_organisation_role_tag_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                    'tag_id',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                    'tag_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                    'tag_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                    'tag_id': 'tagId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                    'tag_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_role_tag_get
        )

        def __iam_organisation_role_tag_list(
            self,
            organisation_id,
            role_id,
            **kwargs
        ):
            """List iam/role.tag  # noqa: E501

            List iam/role.tag  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_tag_list(organisation_id, role_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Tag]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_tag_list = _Endpoint(
            settings={
                'response_type': ([Tag],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}/tag',
                'operation_id': 'iam_organisation_role_tag_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_role_tag_list
        )

        def __iam_organisation_role_tag_put(
            self,
            organisation_id,
            role_id,
            tag_array,
            **kwargs
        ):
            """Replace iam/role.tag  # noqa: E501

            Replace iam/role.tag  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_tag_put(organisation_id, role_id, tag_array, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id
                tag_array (TagArray):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Tag]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            kwargs['tag_array'] = \
                tag_array
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_tag_put = _Endpoint(
            settings={
                'response_type': ([Tag],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}/tag',
                'operation_id': 'iam_organisation_role_tag_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                    'tag_array',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                    'tag_array',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                    'tag_array':
                        (TagArray,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                    'tag_array': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__iam_organisation_role_tag_put
        )

        def __iam_organisation_role_update(
            self,
            organisation_id,
            role_id,
            iam_project_role_update,
            **kwargs
        ):
            """Update iam/role  # noqa: E501

            Returns modified role  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_role_update(organisation_id, role_id, iam_project_role_update, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                role_id (str): Role Id
                iam_project_role_update (IamProjectRoleUpdate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Role
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['role_id'] = \
                role_id
            kwargs['iam_project_role_update'] = \
                iam_project_role_update
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_role_update = _Endpoint(
            settings={
                'response_type': (Role,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/role/{roleId}',
                'operation_id': 'iam_organisation_role_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'role_id',
                    'iam_project_role_update',
                ],
                'required': [
                    'organisation_id',
                    'role_id',
                    'iam_project_role_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'role_id':
                        (str,),
                    'iam_project_role_update':
                        (IamProjectRoleUpdate,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'role_id': 'roleId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'role_id': 'path',
                    'iam_project_role_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__iam_organisation_role_update
        )
