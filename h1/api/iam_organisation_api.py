"""
    HyperOne

    HyperOne API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h1.api_client import ApiClient, Endpoint as _Endpoint
from h1.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from h1.model.billing import Billing
from h1.model.event import Event
from h1.model.iam_organisation_create import IamOrganisationCreate
from h1.model.iam_organisation_invitation_accept import IamOrganisationInvitationAccept
from h1.model.iam_organisation_ownership_create import IamOrganisationOwnershipCreate
from h1.model.iam_organisation_payment_allocate import IamOrganisationPaymentAllocate
from h1.model.iam_organisation_proforma_create import IamOrganisationProformaCreate
from h1.model.iam_organisation_transfer_accept import IamOrganisationTransferAccept
from h1.model.iam_organisation_update import IamOrganisationUpdate
from h1.model.inline_response400 import InlineResponse400
from h1.model.invitation import Invitation
from h1.model.invoice import Invoice
from h1.model.organisation import Organisation
from h1.model.ownership import Ownership
from h1.model.payment import Payment
from h1.model.proforma import Proforma
from h1.model.resource_service import ResourceService
from h1.model.transfer import Transfer


class IamOrganisationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __iam_organisation_billing_list(
            self,
            organisation_id,
            **kwargs
        ):
            """List iam/organisation.billing  # noqa: E501

            List iam/organisation.billing  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_billing_list(organisation_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id

            Keyword Args:
                start (datetime): start. [optional]
                end (datetime): end. [optional]
                resource_type (str): resource.type. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Billing]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_billing_list = _Endpoint(
            settings={
                'response_type': ([Billing],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/billing',
                'operation_id': 'iam_organisation_billing_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'start',
                    'end',
                    'resource_type',
                ],
                'required': [
                    'organisation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'start':
                        (datetime,),
                    'end':
                        (datetime,),
                    'resource_type':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'start': 'start',
                    'end': 'end',
                    'resource_type': 'resource.type',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'start': 'query',
                    'end': 'query',
                    'resource_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_billing_list
        )

        def __iam_organisation_create(
            self,
            iam_organisation_create,
            **kwargs
        ):
            """Create iam/organisation  # noqa: E501

            Create organisation  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_create(iam_organisation_create, async_req=True)
            >>> result = thread.get()

            Args:
                iam_organisation_create (IamOrganisationCreate):

            Keyword Args:
                x_idempotency_key (str): Idempotency key. [optional]
                x_dry_run (str): Dry run. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Organisation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['iam_organisation_create'] = \
                iam_organisation_create
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_create = _Endpoint(
            settings={
                'response_type': (Organisation,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation',
                'operation_id': 'iam_organisation_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'iam_organisation_create',
                    'x_idempotency_key',
                    'x_dry_run',
                ],
                'required': [
                    'iam_organisation_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'iam_organisation_create':
                        (IamOrganisationCreate,),
                    'x_idempotency_key':
                        (str,),
                    'x_dry_run':
                        (str,),
                },
                'attribute_map': {
                    'x_idempotency_key': 'x-idempotency-key',
                    'x_dry_run': 'x-dry-run',
                },
                'location_map': {
                    'iam_organisation_create': 'body',
                    'x_idempotency_key': 'header',
                    'x_dry_run': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__iam_organisation_create
        )

        def __iam_organisation_delete(
            self,
            organisation_id,
            **kwargs
        ):
            """Delete iam/organisation  # noqa: E501

            Delete organisation  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_delete(organisation_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}',
                'operation_id': 'iam_organisation_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                ],
                'required': [
                    'organisation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                },
                'location_map': {
                    'organisation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_delete
        )

        def __iam_organisation_event_get(
            self,
            organisation_id,
            event_id,
            **kwargs
        ):
            """Get iam/organisation.event  # noqa: E501

            Get iam/organisation.event  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_event_get(organisation_id, event_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                event_id (str): eventId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Event
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['event_id'] = \
                event_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_event_get = _Endpoint(
            settings={
                'response_type': (Event,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/event/{eventId}',
                'operation_id': 'iam_organisation_event_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'event_id',
                ],
                'required': [
                    'organisation_id',
                    'event_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'event_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'event_id': 'eventId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'event_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_event_get
        )

        def __iam_organisation_event_list(
            self,
            organisation_id,
            **kwargs
        ):
            """List iam/organisation.event  # noqa: E501

            List iam/organisation.event  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_event_list(organisation_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id

            Keyword Args:
                limit (float): $limit. [optional] if omitted the server will use the default value of 100
                skip (float): $skip. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Event]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_event_list = _Endpoint(
            settings={
                'response_type': ([Event],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/event',
                'operation_id': 'iam_organisation_event_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'limit',
                    'skip',
                ],
                'required': [
                    'organisation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'limit':
                        (float,),
                    'skip':
                        (float,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'limit': '$limit',
                    'skip': '$skip',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'limit': 'query',
                    'skip': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_event_list
        )

        def __iam_organisation_get(
            self,
            organisation_id,
            **kwargs
        ):
            """Get iam/organisation  # noqa: E501

            Returns a single organisation  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_get(organisation_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Organisation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_get = _Endpoint(
            settings={
                'response_type': (Organisation,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}',
                'operation_id': 'iam_organisation_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                ],
                'required': [
                    'organisation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                },
                'location_map': {
                    'organisation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_get
        )

        def __iam_organisation_invitation_accept(
            self,
            organisation_id,
            invitation_id,
            iam_organisation_invitation_accept,
            **kwargs
        ):
            """Accept iam/organisation.invitation  # noqa: E501

            action accept  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_invitation_accept(organisation_id, invitation_id, iam_organisation_invitation_accept, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                invitation_id (str): invitationId
                iam_organisation_invitation_accept (IamOrganisationInvitationAccept):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Invitation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['invitation_id'] = \
                invitation_id
            kwargs['iam_organisation_invitation_accept'] = \
                iam_organisation_invitation_accept
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_invitation_accept = _Endpoint(
            settings={
                'response_type': (Invitation,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/invitation/{invitationId}/actions/accept',
                'operation_id': 'iam_organisation_invitation_accept',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'invitation_id',
                    'iam_organisation_invitation_accept',
                ],
                'required': [
                    'organisation_id',
                    'invitation_id',
                    'iam_organisation_invitation_accept',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'invitation_id':
                        (str,),
                    'iam_organisation_invitation_accept':
                        (IamOrganisationInvitationAccept,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'invitation_id': 'invitationId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'invitation_id': 'path',
                    'iam_organisation_invitation_accept': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__iam_organisation_invitation_accept
        )

        def __iam_organisation_invitation_delete(
            self,
            organisation_id,
            invitation_id,
            **kwargs
        ):
            """Delete iam/organisation.invitation  # noqa: E501

            Delete iam/organisation.invitation  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_invitation_delete(organisation_id, invitation_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                invitation_id (str): invitationId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['invitation_id'] = \
                invitation_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_invitation_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/invitation/{invitationId}',
                'operation_id': 'iam_organisation_invitation_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'invitation_id',
                ],
                'required': [
                    'organisation_id',
                    'invitation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'invitation_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'invitation_id': 'invitationId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'invitation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_invitation_delete
        )

        def __iam_organisation_invitation_get(
            self,
            organisation_id,
            invitation_id,
            **kwargs
        ):
            """Get iam/organisation.invitation  # noqa: E501

            Get iam/organisation.invitation  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_invitation_get(organisation_id, invitation_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                invitation_id (str): invitationId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Invitation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['invitation_id'] = \
                invitation_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_invitation_get = _Endpoint(
            settings={
                'response_type': (Invitation,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/invitation/{invitationId}',
                'operation_id': 'iam_organisation_invitation_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'invitation_id',
                ],
                'required': [
                    'organisation_id',
                    'invitation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'invitation_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'invitation_id': 'invitationId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'invitation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_invitation_get
        )

        def __iam_organisation_invitation_list(
            self,
            organisation_id,
            **kwargs
        ):
            """List iam/organisation.invitation  # noqa: E501

            List iam/organisation.invitation  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_invitation_list(organisation_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id

            Keyword Args:
                resource (str): resource. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Invitation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_invitation_list = _Endpoint(
            settings={
                'response_type': ([Invitation],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/invitation',
                'operation_id': 'iam_organisation_invitation_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'resource',
                ],
                'required': [
                    'organisation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'resource':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'resource': 'resource',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'resource': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_invitation_list
        )

        def __iam_organisation_invoice_download(
            self,
            organisation_id,
            invoice_id,
            **kwargs
        ):
            """Download iam/organisation.invoice  # noqa: E501

            action download  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_invoice_download(organisation_id, invoice_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                invoice_id (str): invoiceId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['invoice_id'] = \
                invoice_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_invoice_download = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/invoice/{invoiceId}/actions/download',
                'operation_id': 'iam_organisation_invoice_download',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'invoice_id',
                ],
                'required': [
                    'organisation_id',
                    'invoice_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'invoice_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'invoice_id': 'invoiceId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'invoice_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/pdf',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_invoice_download
        )

        def __iam_organisation_invoice_get(
            self,
            organisation_id,
            invoice_id,
            **kwargs
        ):
            """Get iam/organisation.invoice  # noqa: E501

            Get iam/organisation.invoice  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_invoice_get(organisation_id, invoice_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                invoice_id (str): invoiceId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Invoice
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['invoice_id'] = \
                invoice_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_invoice_get = _Endpoint(
            settings={
                'response_type': (Invoice,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/invoice/{invoiceId}',
                'operation_id': 'iam_organisation_invoice_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'invoice_id',
                ],
                'required': [
                    'organisation_id',
                    'invoice_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'invoice_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'invoice_id': 'invoiceId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'invoice_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_invoice_get
        )

        def __iam_organisation_invoice_list(
            self,
            organisation_id,
            **kwargs
        ):
            """List iam/organisation.invoice  # noqa: E501

            List iam/organisation.invoice  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_invoice_list(organisation_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Invoice]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_invoice_list = _Endpoint(
            settings={
                'response_type': ([Invoice],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/invoice',
                'operation_id': 'iam_organisation_invoice_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                ],
                'required': [
                    'organisation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                },
                'location_map': {
                    'organisation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_invoice_list
        )

        def __iam_organisation_list(
            self,
            **kwargs
        ):
            """List iam/organisation  # noqa: E501

            List organisation  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                name (str): Filter by name. [optional]
                billing_company (str): Filter by billing.company. [optional]
                limit (float): Filter by $limit. [optional]
                active (bool): Filter by active. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Organisation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_list = _Endpoint(
            settings={
                'response_type': ([Organisation],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation',
                'operation_id': 'iam_organisation_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'billing_company',
                    'limit',
                    'active',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'billing_company':
                        (str,),
                    'limit':
                        (float,),
                    'active':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'billing_company': 'billing.company',
                    'limit': '$limit',
                    'active': 'active',
                },
                'location_map': {
                    'name': 'query',
                    'billing_company': 'query',
                    'limit': 'query',
                    'active': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_list
        )

        def __iam_organisation_ownership_create(
            self,
            organisation_id,
            iam_organisation_ownership_create,
            **kwargs
        ):
            """Create iam/organisation.ownership  # noqa: E501

            Create iam/organisation.ownership  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_ownership_create(organisation_id, iam_organisation_ownership_create, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                iam_organisation_ownership_create (IamOrganisationOwnershipCreate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Organisation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['iam_organisation_ownership_create'] = \
                iam_organisation_ownership_create
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_ownership_create = _Endpoint(
            settings={
                'response_type': (Organisation,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/ownership',
                'operation_id': 'iam_organisation_ownership_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'iam_organisation_ownership_create',
                ],
                'required': [
                    'organisation_id',
                    'iam_organisation_ownership_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'iam_organisation_ownership_create':
                        (IamOrganisationOwnershipCreate,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'iam_organisation_ownership_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__iam_organisation_ownership_create
        )

        def __iam_organisation_ownership_delete(
            self,
            organisation_id,
            ownership_id,
            **kwargs
        ):
            """Delete iam/organisation.ownership  # noqa: E501

            Delete iam/organisation.ownership  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_ownership_delete(organisation_id, ownership_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                ownership_id (str): ownershipId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['ownership_id'] = \
                ownership_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_ownership_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/ownership/{ownershipId}',
                'operation_id': 'iam_organisation_ownership_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'ownership_id',
                ],
                'required': [
                    'organisation_id',
                    'ownership_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'ownership_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'ownership_id': 'ownershipId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'ownership_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_ownership_delete
        )

        def __iam_organisation_ownership_get(
            self,
            organisation_id,
            ownership_id,
            **kwargs
        ):
            """Get iam/organisation.ownership  # noqa: E501

            Get iam/organisation.ownership  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_ownership_get(organisation_id, ownership_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                ownership_id (str): ownershipId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Ownership
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['ownership_id'] = \
                ownership_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_ownership_get = _Endpoint(
            settings={
                'response_type': (Ownership,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/ownership/{ownershipId}',
                'operation_id': 'iam_organisation_ownership_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'ownership_id',
                ],
                'required': [
                    'organisation_id',
                    'ownership_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'ownership_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'ownership_id': 'ownershipId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'ownership_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_ownership_get
        )

        def __iam_organisation_ownership_list(
            self,
            organisation_id,
            **kwargs
        ):
            """List iam/organisation.ownership  # noqa: E501

            List iam/organisation.ownership  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_ownership_list(organisation_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Ownership]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_ownership_list = _Endpoint(
            settings={
                'response_type': ([Ownership],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/ownership',
                'operation_id': 'iam_organisation_ownership_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                ],
                'required': [
                    'organisation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                },
                'location_map': {
                    'organisation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_ownership_list
        )

        def __iam_organisation_payment_allocate(
            self,
            organisation_id,
            payment_id,
            iam_organisation_payment_allocate,
            **kwargs
        ):
            """Allocate iam/organisation.payment  # noqa: E501

            action allocate  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_payment_allocate(organisation_id, payment_id, iam_organisation_payment_allocate, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                payment_id (str): paymentId
                iam_organisation_payment_allocate (IamOrganisationPaymentAllocate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Payment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['payment_id'] = \
                payment_id
            kwargs['iam_organisation_payment_allocate'] = \
                iam_organisation_payment_allocate
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_payment_allocate = _Endpoint(
            settings={
                'response_type': (Payment,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/payment/{paymentId}/actions/allocate',
                'operation_id': 'iam_organisation_payment_allocate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'payment_id',
                    'iam_organisation_payment_allocate',
                ],
                'required': [
                    'organisation_id',
                    'payment_id',
                    'iam_organisation_payment_allocate',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'payment_id':
                        (str,),
                    'iam_organisation_payment_allocate':
                        (IamOrganisationPaymentAllocate,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'payment_id': 'paymentId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'payment_id': 'path',
                    'iam_organisation_payment_allocate': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__iam_organisation_payment_allocate
        )

        def __iam_organisation_payment_get(
            self,
            organisation_id,
            payment_id,
            **kwargs
        ):
            """Get iam/organisation.payment  # noqa: E501

            Get iam/organisation.payment  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_payment_get(organisation_id, payment_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                payment_id (str): paymentId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Payment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['payment_id'] = \
                payment_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_payment_get = _Endpoint(
            settings={
                'response_type': (Payment,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/payment/{paymentId}',
                'operation_id': 'iam_organisation_payment_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'payment_id',
                ],
                'required': [
                    'organisation_id',
                    'payment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'payment_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'payment_id': 'paymentId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'payment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_payment_get
        )

        def __iam_organisation_payment_list(
            self,
            organisation_id,
            **kwargs
        ):
            """List iam/organisation.payment  # noqa: E501

            List iam/organisation.payment  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_payment_list(organisation_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Payment]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_payment_list = _Endpoint(
            settings={
                'response_type': ([Payment],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/payment',
                'operation_id': 'iam_organisation_payment_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                ],
                'required': [
                    'organisation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                },
                'location_map': {
                    'organisation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_payment_list
        )

        def __iam_organisation_proforma_create(
            self,
            organisation_id,
            iam_organisation_proforma_create,
            **kwargs
        ):
            """Create iam/organisation.proforma  # noqa: E501

            Create iam/organisation.proforma  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_proforma_create(organisation_id, iam_organisation_proforma_create, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                iam_organisation_proforma_create (IamOrganisationProformaCreate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Proforma
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['iam_organisation_proforma_create'] = \
                iam_organisation_proforma_create
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_proforma_create = _Endpoint(
            settings={
                'response_type': (Proforma,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/proforma',
                'operation_id': 'iam_organisation_proforma_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'iam_organisation_proforma_create',
                ],
                'required': [
                    'organisation_id',
                    'iam_organisation_proforma_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'iam_organisation_proforma_create':
                        (IamOrganisationProformaCreate,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'iam_organisation_proforma_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__iam_organisation_proforma_create
        )

        def __iam_organisation_proforma_download(
            self,
            organisation_id,
            proforma_id,
            **kwargs
        ):
            """Download iam/organisation.proforma  # noqa: E501

            action download  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_proforma_download(organisation_id, proforma_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                proforma_id (str): proformaId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['proforma_id'] = \
                proforma_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_proforma_download = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/proforma/{proformaId}/actions/download',
                'operation_id': 'iam_organisation_proforma_download',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'proforma_id',
                ],
                'required': [
                    'organisation_id',
                    'proforma_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'proforma_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'proforma_id': 'proformaId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'proforma_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/pdf',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_proforma_download
        )

        def __iam_organisation_proforma_get(
            self,
            organisation_id,
            proforma_id,
            **kwargs
        ):
            """Get iam/organisation.proforma  # noqa: E501

            Get iam/organisation.proforma  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_proforma_get(organisation_id, proforma_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                proforma_id (str): proformaId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Proforma
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['proforma_id'] = \
                proforma_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_proforma_get = _Endpoint(
            settings={
                'response_type': (Proforma,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/proforma/{proformaId}',
                'operation_id': 'iam_organisation_proforma_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'proforma_id',
                ],
                'required': [
                    'organisation_id',
                    'proforma_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'proforma_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'proforma_id': 'proformaId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'proforma_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_proforma_get
        )

        def __iam_organisation_proforma_list(
            self,
            organisation_id,
            **kwargs
        ):
            """List iam/organisation.proforma  # noqa: E501

            List iam/organisation.proforma  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_proforma_list(organisation_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Proforma]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_proforma_list = _Endpoint(
            settings={
                'response_type': ([Proforma],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/proforma',
                'operation_id': 'iam_organisation_proforma_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                ],
                'required': [
                    'organisation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                },
                'location_map': {
                    'organisation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_proforma_list
        )

        def __iam_organisation_service_get(
            self,
            organisation_id,
            service_id,
            **kwargs
        ):
            """Get iam/organisation.service  # noqa: E501

            Get iam/organisation.service  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_service_get(organisation_id, service_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                service_id (str): serviceId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResourceService
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['service_id'] = \
                service_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_service_get = _Endpoint(
            settings={
                'response_type': (ResourceService,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/service/{serviceId}',
                'operation_id': 'iam_organisation_service_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'service_id',
                ],
                'required': [
                    'organisation_id',
                    'service_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'service_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'service_id': 'serviceId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'service_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_service_get
        )

        def __iam_organisation_service_list(
            self,
            organisation_id,
            **kwargs
        ):
            """List iam/organisation.service  # noqa: E501

            List iam/organisation.service  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_service_list(organisation_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ResourceService]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_service_list = _Endpoint(
            settings={
                'response_type': ([ResourceService],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/service',
                'operation_id': 'iam_organisation_service_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                ],
                'required': [
                    'organisation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                },
                'location_map': {
                    'organisation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_service_list
        )

        def __iam_organisation_transfer_accept(
            self,
            organisation_id,
            transfer_id,
            iam_organisation_transfer_accept,
            **kwargs
        ):
            """Accept iam/organisation.transfer  # noqa: E501

            action accept  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_transfer_accept(organisation_id, transfer_id, iam_organisation_transfer_accept, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                transfer_id (str): transferId
                iam_organisation_transfer_accept (IamOrganisationTransferAccept):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Transfer
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['transfer_id'] = \
                transfer_id
            kwargs['iam_organisation_transfer_accept'] = \
                iam_organisation_transfer_accept
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_transfer_accept = _Endpoint(
            settings={
                'response_type': (Transfer,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/transfer/{transferId}/actions/accept',
                'operation_id': 'iam_organisation_transfer_accept',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'transfer_id',
                    'iam_organisation_transfer_accept',
                ],
                'required': [
                    'organisation_id',
                    'transfer_id',
                    'iam_organisation_transfer_accept',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'transfer_id':
                        (str,),
                    'iam_organisation_transfer_accept':
                        (IamOrganisationTransferAccept,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'transfer_id': 'transferId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'transfer_id': 'path',
                    'iam_organisation_transfer_accept': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__iam_organisation_transfer_accept
        )

        def __iam_organisation_transfer_get(
            self,
            organisation_id,
            transfer_id,
            **kwargs
        ):
            """Get iam/organisation.transfer  # noqa: E501

            Get iam/organisation.transfer  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_transfer_get(organisation_id, transfer_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                transfer_id (str): transferId

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Transfer
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['transfer_id'] = \
                transfer_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_transfer_get = _Endpoint(
            settings={
                'response_type': (Transfer,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/transfer/{transferId}',
                'operation_id': 'iam_organisation_transfer_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'transfer_id',
                ],
                'required': [
                    'organisation_id',
                    'transfer_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'transfer_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                    'transfer_id': 'transferId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'transfer_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_transfer_get
        )

        def __iam_organisation_transfer_list(
            self,
            organisation_id,
            **kwargs
        ):
            """List iam/organisation.transfer  # noqa: E501

            List iam/organisation.transfer  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_transfer_list(organisation_id, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Transfer]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_transfer_list = _Endpoint(
            settings={
                'response_type': ([Transfer],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}/transfer',
                'operation_id': 'iam_organisation_transfer_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                ],
                'required': [
                    'organisation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                },
                'location_map': {
                    'organisation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__iam_organisation_transfer_list
        )

        def __iam_organisation_update(
            self,
            organisation_id,
            iam_organisation_update,
            **kwargs
        ):
            """Update iam/organisation  # noqa: E501

            Returns modified organisation  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.iam_organisation_update(organisation_id, iam_organisation_update, async_req=True)
            >>> result = thread.get()

            Args:
                organisation_id (str): Organisation Id
                iam_organisation_update (IamOrganisationUpdate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Organisation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organisation_id'] = \
                organisation_id
            kwargs['iam_organisation_update'] = \
                iam_organisation_update
            return self.call_with_http_info(**kwargs)

        self.iam_organisation_update = _Endpoint(
            settings={
                'response_type': (Organisation,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/iam/organisation/{organisationId}',
                'operation_id': 'iam_organisation_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_id',
                    'iam_organisation_update',
                ],
                'required': [
                    'organisation_id',
                    'iam_organisation_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organisation_id':
                        (str,),
                    'iam_organisation_update':
                        (IamOrganisationUpdate,),
                },
                'attribute_map': {
                    'organisation_id': 'organisationId',
                },
                'location_map': {
                    'organisation_id': 'path',
                    'iam_organisation_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__iam_organisation_update
        )
