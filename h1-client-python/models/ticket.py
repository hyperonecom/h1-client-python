# coding: utf-8

"""
    HyperOne

    HyperOne API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from h1-client-python.configuration import Configuration


class Ticket(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'type': 'str',
        'state': 'str',
        'subject': 'str',
        'project': 'str',
        'created_on': 'str',
        'created_by': 'str',
        'modified_on': 'str',
        'modified_by': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'state': 'state',
        'subject': 'subject',
        'project': 'project',
        'created_on': 'createdOn',
        'created_by': 'createdBy',
        'modified_on': 'modifiedOn',
        'modified_by': 'modifiedBy'
    }

    def __init__(self, id=None, type=None, state=None, subject=None, project=None, created_on=None, created_by=None, modified_on=None, modified_by=None, local_vars_configuration=None):  # noqa: E501
        """Ticket - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._state = None
        self._subject = None
        self._project = None
        self._created_on = None
        self._created_by = None
        self._modified_on = None
        self._modified_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if state is not None:
            self.state = state
        if subject is not None:
            self.subject = subject
        if project is not None:
            self.project = project
        if created_on is not None:
            self.created_on = created_on
        if created_by is not None:
            self.created_by = created_by
        if modified_on is not None:
            self.modified_on = modified_on
        if modified_by is not None:
            self.modified_by = modified_by

    @property
    def id(self):
        """Gets the id of this Ticket.  # noqa: E501


        :return: The id of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ticket.


        :param id: The id of this Ticket.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Ticket.  # noqa: E501


        :return: The type of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Ticket.


        :param type: The type of this Ticket.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def state(self):
        """Gets the state of this Ticket.  # noqa: E501


        :return: The state of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Ticket.


        :param state: The state of this Ticket.  # noqa: E501
        :type: str
        """
        allowed_values = ["open", "closed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def subject(self):
        """Gets the subject of this Ticket.  # noqa: E501


        :return: The subject of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Ticket.


        :param subject: The subject of this Ticket.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def project(self):
        """Gets the project of this Ticket.  # noqa: E501


        :return: The project of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Ticket.


        :param project: The project of this Ticket.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def created_on(self):
        """Gets the created_on of this Ticket.  # noqa: E501


        :return: The created_on of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Ticket.


        :param created_on: The created_on of this Ticket.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def created_by(self):
        """Gets the created_by of this Ticket.  # noqa: E501


        :return: The created_by of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Ticket.


        :param created_by: The created_by of this Ticket.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_on(self):
        """Gets the modified_on of this Ticket.  # noqa: E501


        :return: The modified_on of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this Ticket.


        :param modified_on: The modified_on of this Ticket.  # noqa: E501
        :type: str
        """

        self._modified_on = modified_on

    @property
    def modified_by(self):
        """Gets the modified_by of this Ticket.  # noqa: E501


        :return: The modified_by of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Ticket.


        :param modified_by: The modified_by of this Ticket.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ticket):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Ticket):
            return True

        return self.to_dict() != other.to_dict()
