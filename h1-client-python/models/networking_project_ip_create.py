# coding: utf-8

"""
    HyperOne

    HyperOne API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from h1-client-python.configuration import Configuration


class NetworkingProjectIpCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'network': 'str',
        'ptr_record': 'str',
        'address': 'str',
        'tag': 'list[Tag]'
    }

    attribute_map = {
        'network': 'network',
        'ptr_record': 'ptrRecord',
        'address': 'address',
        'tag': 'tag'
    }

    def __init__(self, network=None, ptr_record=None, address=None, tag=None, local_vars_configuration=None):  # noqa: E501
        """NetworkingProjectIpCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._network = None
        self._ptr_record = None
        self._address = None
        self._tag = None
        self.discriminator = None

        if network is not None:
            self.network = network
        if ptr_record is not None:
            self.ptr_record = ptr_record
        if address is not None:
            self.address = address
        if tag is not None:
            self.tag = tag

    @property
    def network(self):
        """Gets the network of this NetworkingProjectIpCreate.  # noqa: E501


        :return: The network of this NetworkingProjectIpCreate.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this NetworkingProjectIpCreate.


        :param network: The network of this NetworkingProjectIpCreate.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def ptr_record(self):
        """Gets the ptr_record of this NetworkingProjectIpCreate.  # noqa: E501


        :return: The ptr_record of this NetworkingProjectIpCreate.  # noqa: E501
        :rtype: str
        """
        return self._ptr_record

    @ptr_record.setter
    def ptr_record(self, ptr_record):
        """Sets the ptr_record of this NetworkingProjectIpCreate.


        :param ptr_record: The ptr_record of this NetworkingProjectIpCreate.  # noqa: E501
        :type: str
        """

        self._ptr_record = ptr_record

    @property
    def address(self):
        """Gets the address of this NetworkingProjectIpCreate.  # noqa: E501


        :return: The address of this NetworkingProjectIpCreate.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this NetworkingProjectIpCreate.


        :param address: The address of this NetworkingProjectIpCreate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                address is not None and not re.search(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', address)):  # noqa: E501
            raise ValueError(r"Invalid value for `address`, must be a follow pattern or equal to `/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/`")  # noqa: E501

        self._address = address

    @property
    def tag(self):
        """Gets the tag of this NetworkingProjectIpCreate.  # noqa: E501


        :return: The tag of this NetworkingProjectIpCreate.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this NetworkingProjectIpCreate.


        :param tag: The tag of this NetworkingProjectIpCreate.  # noqa: E501
        :type: list[Tag]
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkingProjectIpCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkingProjectIpCreate):
            return True

        return self.to_dict() != other.to_dict()
