# coding: utf-8

"""
    HyperOne

    HyperOne API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import h1-client-python
from h1-client-python.models.service_billing import ServiceBilling  # noqa: E501
from h1-client-python.rest import ApiException

class TestServiceBilling(unittest.TestCase):
    """ServiceBilling unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ServiceBilling
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = h1-client-python.models.service_billing.ServiceBilling()  # noqa: E501
        if include_optional :
            return ServiceBilling(
                price = h1-client-python.models.service_billing_price.service_billing_price(
                    pln = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, 
                    gbp = 1.337, ), 
                period = '0', 
                quantity = 1.337, 
                one_time = True, 
                reservations = h1-client-python.models.service_billing_reservations.service_billing_reservations(
                    id = '0', 
                    period = '0', 
                    price = h1-client-python.models.service_billing_price.service_billing_price(
                        pln = 1.337, 
                        eur = 1.337, 
                        usd = 1.337, 
                        gbp = 1.337, ), 
                    resource_price = h1-client-python.models.service_billing_price.service_billing_price(
                        pln = 1.337, 
                        eur = 1.337, 
                        usd = 1.337, 
                        gbp = 1.337, ), )
            )
        else :
            return ServiceBilling(
        )

    def testServiceBilling(self):
        """Test ServiceBilling"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
